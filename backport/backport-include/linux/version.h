#ifndef _BP_LINUX_VERSION_H
#define _BP_LINUX_VERSION_H
#include_next <linux/version.h>

#ifndef RHEL_RELEASE_VERSION
#define RHEL_RELEASE_VERSION(a,b) (((a) << 8) + (b))
#endif

#ifndef RHEL_RELEASE_CODE
#define RHEL_RELEASE_CODE 0
#endif

#define RHEL_RELEASE_IS_GEQ(x1,x2) \
(RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(x1,x2))

#define LINUX_VERSION_IS_LESS(x1,x2,x3) \
((x1 >  CPTCFG_VERSION_KERNEL) || \
((x1 == CPTCFG_VERSION_KERNEL) && (x2 > CPTCFG_VERSION_PATCHLEVEL)) || \
((x1 == CPTCFG_VERSION_KERNEL) && (x2 == CPTCFG_VERSION_PATCHLEVEL) && \
 (x3 >  CPTCFG_VERSION_SUBLEVEL)))


#define LINUX_VERSION_IS_GRT(x1,x2,x3) \
((x1 <  CPTCFG_VERSION_KERNEL) || \
((x1 == CPTCFG_VERSION_KERNEL) && (x2 < CPTCFG_VERSION_PATCHLEVEL)) || \
((x1 == CPTCFG_VERSION_KERNEL) && (x2 == CPTCFG_VERSION_PATCHLEVEL) &&\
 (x3 <  CPTCFG_VERSION_SUBLEVEL)))

#define LINUX_VERSION_IS_EQU(x1,x2,x3) \
((x1 == CPTCFG_VERSION_KERNEL) && (x2 == CPTCFG_VERSION_PATCHLEVEL) && \
 (x3 == CPTCFG_VERSION_SUBLEVEL))

#define LINUX_VERSION_IS_GEQ(x1,x2,x3) \
(LINUX_VERSION_IS_GRT(x1,x2,x3) || LINUX_VERSION_IS_EQU(x1,x2,x3))

#define LINUX_VERSION_IN_RANGE(x1,x2,x3, y1,y2,y3) \
	(LINUX_VERSION_IS_GEQ(x1,x2,x3) && LINUX_VERSION_IS_LESS(y1,y2,y3))

#endif /* _BP_LINUX_VERSION_H */
